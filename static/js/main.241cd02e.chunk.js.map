{"version":3,"sources":["components/Profile.js","features/user.js","components/Login.js","features/theme.js","components/ChangeColor.js","App.js","reportWebVitals.js","index.js"],"names":["Profile","user","useSelector","state","value","themeColor","theme","style","color","name","age","email","initialStateValue","userSlice","createSlice","initialState","reducers","login","action","payload","logout","actions","Login","dispatch","useDispatch","onClick","themeSlice","changeColor","ChangeColor","useState","setColor","type","onChange","event","target","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","userReducer","themeReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6MAiBeA,MAdf,WACE,IAAMC,EAAOC,aAAY,SAACC,GAAD,OAAWA,EAAMF,KAAKG,SACzCC,EAAaH,aAAY,SAACC,GAAD,OAAWA,EAAMG,MAAMF,SAEtD,OACE,sBAAKG,MAAO,CAAEC,MAAOH,GAArB,UACE,+CACA,wCAAWJ,EAAKQ,KAAhB,OACA,uCAAUR,EAAKS,OACf,yCAAYT,EAAKU,a,OCVjBC,EAAoB,CAAEH,KAAM,GAAIC,IAAK,EAAGC,MAAO,IAExCE,EAAYC,YAAY,CACnCL,KAAM,OACNM,aAAc,CAAEX,MAAOQ,GACvBI,SAAU,CACRC,MAAO,SAACd,EAAOe,GACbf,EAAMC,MAAQc,EAAOC,SAGvBC,OAAQ,SAACjB,GACPA,EAAMC,MAAQQ,MAKb,EAA0BC,EAAUQ,QAA5BJ,EAAR,EAAQA,MAAOG,EAAf,EAAeA,OAEPP,IAAf,QCQeS,MAxBf,WACE,IAAMC,EAAWC,cAEjB,OACE,gCACE,wBACEC,QAAS,WACPF,EAASN,EAAM,CAAER,KAAM,QAASC,IAAK,GAAIC,MAAO,sBAFpD,mBAQA,wBACEc,QAAS,WACPF,EAASH,MAFb,wB,OCbOM,EAAaZ,YAAY,CACpCL,KAAM,QACNM,aAAc,CAAEX,MAJQ,IAKxBY,SAAU,CACRW,YAAa,SAACxB,EAAOe,GACnBf,EAAMC,MAAQc,EAAOC,YAKZQ,EAAgBD,EAAWL,QAA3BM,YAEAD,IAAf,QCWeE,MAvBf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOrB,EAAP,KAAcsB,EAAd,KACMP,EAAWC,cAEjB,OACE,gCACE,uBACEO,KAAK,OACLC,SAAU,SAACC,GACTH,EAASG,EAAMC,OAAO9B,UAG1B,wBACEqB,QAAS,WACPF,EAASI,EAAYnB,KAFzB,8BCDS2B,MAVf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCESC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCERQ,EAAQC,YAAe,CAC3BC,QAAS,CACP/C,KAAMgD,EACN3C,MAAO4C,KAIXC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJQ,SAASC,eAAe,SAM1BlB,M","file":"static/js/main.241cd02e.chunk.js","sourcesContent":["import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nfunction Profile() {\n  const user = useSelector((state) => state.user.value);\n  const themeColor = useSelector((state) => state.theme.value);\n\n  return (\n    <div style={{ color: themeColor }}>\n      <h1> Profile Page</h1>\n      <p> Name: {user.name} </p>\n      <p> Age: {user.age}</p>\n      <p> Email: {user.email}</p>\n    </div>\n  );\n}\n\nexport default Profile;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialStateValue = { name: \"\", age: 0, email: \"\" };\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: { value: initialStateValue },\n  reducers: {\n    login: (state, action) => {\n      state.value = action.payload;\n    },\n\n    logout: (state) => {\n      state.value = initialStateValue;\n    },\n  },\n});\n\nexport const { login, logout } = userSlice.actions;\n\nexport default userSlice.reducer;\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { login, logout } from \"../features/user\";\n\nfunction Login() {\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <button\n        onClick={() => {\n          dispatch(login({ name: \"Pedro\", age: 20, email: \"pedro@gmail.com\" }));\n        }}\n      >\n        Login\n      </button>\n\n      <button\n        onClick={() => {\n          dispatch(logout());\n        }}\n      >\n        LOGOUT\n      </button>\n    </div>\n  );\n}\n\nexport default Login;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialStateValue = \"\";\n\nexport const themeSlice = createSlice({\n  name: \"theme\",\n  initialState: { value: initialStateValue },\n  reducers: {\n    changeColor: (state, action) => {\n      state.value = action.payload;\n    },\n  },\n});\n\nexport const { changeColor } = themeSlice.actions;\n\nexport default themeSlice.reducer;\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { changeColor } from \"../features/theme\";\n\nfunction ChangeColor() {\n  const [color, setColor] = useState(\"\");\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        onChange={(event) => {\n          setColor(event.target.value);\n        }}\n      />\n      <button\n        onClick={() => {\n          dispatch(changeColor(color));\n        }}\n      >\n        CHANGE COLOR\n      </button>\n    </div>\n  );\n}\n\nexport default ChangeColor;\n","import \"./App.css\";\nimport Profile from \"./components/Profile\";\nimport Login from \"./components/Login\";\nimport ChangeColor from \"./components/ChangeColor\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Profile />\n      <Login />\n      <ChangeColor />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport { Provider } from \"react-redux\";\nimport userReducer from \"./features/user\";\nimport themeReducer from \"./features/theme\";\n\nconst store = configureStore({\n  reducer: {\n    user: userReducer,\n    theme: themeReducer,\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}